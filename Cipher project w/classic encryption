#include <stdio.h>
#include <stdlib.h>
#include <string.h>



void railFence(char *message, char *cipherText, int length, int A);
//void railFence2(char *message, char *cipherText, int length, int A, int B, int dir);


int main()
{
    int length;
    int CharacterLimit = 1024;
    char message[]= "HELLO";
    char cipherText[10];       // cannot and do not need to pass 2D array. matrix is built inside the function body. not in main.
    int i,j;                                   // creates a grid 100 rows down 1000 collums accross. this is the grid characters will print on.
    int A = 3;
    int dir, userOptions;
    length = strlen(message);                  // dir is user selected option.
    //char message[CharacterLimit];         // max allowed amount of characters


    printf("Welcome to cipher algorithms.\n\n");
    /**     printf("\nEnter the message you wish to encrypt:\n\n");
            scanf("%s", message);
            fgets(message, 30, stdin);

            while(strlen(message) < 3)                      // If user message does not meet minimum character limit
            {
                printf("\nError, your message must have atleast 3 characters.\n\n");
                printf("\nEnter the message you wish messageto encrypt :\n");
                scanf("%s", message);
                fgets(message, 30, stdin);
            }
            length = strlen(message);
            printf("\nEnter the key# ");
            scanf("%d", &key);
    */
    printf("for the classical rail-fence cipher algorithm, enter:\n");
    printf(" 0)To encrypt a message.\n\n");
    printf("For the 2-level rail-fence cipher algorithm, enter:\n");
    printf(" 1)To encrypt a message. \n 2)To decrypt a message.\n\n");
    scanf("%d", &userOptions);
    while(userOptions >2 || userOptions <0)
    {
        printf("Error, Please select options 0, 1 or 2 \n");
        scanf("%d", &userOptions);
    }
    printf("\nEncrypting:'%s' please wait...\n\n" , message);



    switch(userOptions)
    {
        case 0:                 // if user selects option '0' (classical encrypt a message) do:
        {
            railFence(message, cipherText, length, A);
            break;
        }
    }

       /** case 1: // if user selects option '2' ( 2-level encrypt a message) do:
        {
            printf("\nEnter the message you wish to encrypt:\n\n");
            scanf("%s", message);
             // fgets(message, 30, stdin)
            while(strlen(message) < 3) // If user message does not meet minimum character limit
            {
                printf("\nError, your message must have atleast 3 characters.\n\n");
                printf("Enter the message you wish to encrypt:\n");
                scanf("%s", message);
                 // fgets(message, 30, stdin)

                //continue; // if string lenght < 3 restart loop
            }
            printf("\nEncrypting:'%s' please wait...\n\n" , message);
           // cipherText = railFence2(*message, *cipherText, length, A, B, dir, key);


        break;
        }


        case 2: // if user selects option '3' ( 2-level decrypt a message) do:
        {
            printf("\nEnter the message you wish to decrypt:\n\n");
            scanf("%s", message);

            //fgets(message, 30, stdin)
            while(strlen(message) < 3) // If user message does not meet minimum character limit
            {
                printf("\nError, your message must have atleast 3 characters.\n\n");
                printf("Enter the message you wish to decrypt:\n");
                scanf("%s", message);
            //fgets(message, 30, stdin)

            }
            printf("Enter key:#");
            scanf("%d", &key);
            printf("\nDecrypting:'%s' please wait...\n\n" , message);

            cipherText = railFence2(*message, *cipherText, length, A, B, dir, key)
                {


                }


        break;
        }

        default:
            printf("\nError, please select option 0, 1 or 2\n");
        break;
    }

    //fgets(message, 50, stdin); */
}

void railFence(char *message, char *cipherText, int length, int A)
{
    int matrix[A+1][length+1];
    int i=0, j=0;
    //for(i = 0; i<5;i++)

   /** printf("\nEnter the message you wish to encrypt:\n\n");
    fgets(message, CharacterLimit, stdin);
    scanf("%s", &message);
    length = strlen(message);
    printf("\nEnter the key# ");
    scanf("%d", &key);

    while (length > CharacterLimit|| length <=0)   // Setting charater limit.
    {
        printf("Error, you have exceeded the character limit of: %d\n", CharacterLimit);
        printf("\nEnter the message you wish to encrypt:\n\n");
        scanf("%s", &message);
        length = strlen(message);
    }
        */

    for (i = 0; i <A; i++)                           // for integer value of key
    {
        for (j = 0; j<length; j++)                // for number of characters in users message
        {
           matrix[i][j] = 0;                     // setting grid to 0, limits are the key & users message length
        }                                       // setting entire grid to zero so we can print all non zero elements later, i.e. the characters
    }
        /**message tester----------------
    for(i = 0; i<length;i++)
    {
        printf("  %c", message[i]);
    } */

    j=0,i=0;                                              // reinitialising counters to begin new loop.
       while(j<length)
    {
        if(i+1>A || j+1>length)                        // tests if i or j are going past their 'key' or 'length' limits. if so, reverse i (go back up the grid)
        {
            for(i = A-2; i >0; i--)                  // move down the (rows) by 1 // "key -2" is important here
            {
                matrix[i][j] = (int)message[j];    /// add each message letter  to the (ith,jth) co-ordinates to the matrix in a diagonal decrementing order.
                j++;                              //move accross 1 collum repeat loop
            }
        }
        else
        {
            for(i = 0; i < A; i++)
            {
                matrix[i][j] = (int)message[j]; /// add each character to the (ith & jth) co-ordinates on the matrix in a diagonal incrementing order.
                j++;                           //move accross 1 collum repeat loop
            }
        }
    }

        /**debugger------------------
    for(i = 0; i < A; i++)                          // i is the rows or 'key'
    {
        printf("i = %d   ", i);                   // this frints the ith collum number
            for(j = 0; j < length; j++)          // j is collum number, length is the number of characters in users message
            {
                printf("%c ", matrix[i][j]);   // prints the i x j sized grid
            }
        printf("\n"); // need this on seperate printf statement, messes with character printing

   }    -----------------------*/

    /// below prints the encoded message
    for(i = 0; i < A; i++)                       // from 0th row to 'keys' integer value row
    {
        for(j = 0; j < length; j++)             // from 0th collum to message length value collum
        {
            if(matrix[i][j] != 0)             // if strings element at given i & j values is not = 0
            {
            printf("%c ", matrix[i][j]);    // print the strings element for given i & j values
            }
        }
    }
}
